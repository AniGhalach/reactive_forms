// Copyright 2020 Joan Pablo Jim√©nez Milian. All rights reserved.
// Use of this source code is governed by the MIT license that can be
// found in the LICENSE file.

import 'package:flutter/foundation.dart';

/// This is the base class for FormControl and FormGroup.
///
/// It provides some of the shared behavior that all controls and groups have,
/// like running validators, calculating status, and resetting state.
///
/// It also defines the properties that are shared between all sub-classes,
/// like value and valid.
///
/// It shouldn't be instantiated directly.
abstract class AbstractControl<T> {
  final _onStatusChanged = ValueNotifier<bool>(true);
  final Map<String, dynamic> _errors = {};

  /// The current value of the control.
  T get value;

  /// Sets the value to the control
  set value(T newValue);

  /// An object containing any errors generated by failing validation,
  /// or empty [Map] if there are no errors.
  Map<String, dynamic> get errors => Map.unmodifiable(_errors);

  /// A [ValueListenable] that emits an event every time the validation status
  /// of the control changes.
  ValueListenable<bool> get onStatusChanged => _onStatusChanged;

  /// A [ValueListenable] that emits an event every time the value
  /// of the control changes.
  ValueListenable<T> get onValueChanged;

  /// True if the control doesn't has validations errors.
  bool get valid => this.errors.keys.length == 0;

  /// True if the control has validations errors.
  bool get invalid => !this.valid;

  /// Disposes the control
  @protected
  void dispose() {
    _onStatusChanged.dispose();
  }

  /// Resets the control.
  void reset();

  /// Add errors when running validations manually, rather than automatically.
  ///
  /// ### Example:
  ///
  /// ```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.addError({'mustMatch': true});
  ///```
  ///
  /// See also [AbstractControl.removeError]
  ///
  void addError(Map<String, dynamic> error) {
    this._errors.addAll(error);
    notifyStatusChanged();
  }

  /// Remove errors by name.
  ///
  /// ### Example:
  ///
  ///```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.removeError('mustMatch');
  ///```
  ///
  /// See also [AbstractControl.addError]
  ///
  void removeError(String errorName) {
    this._errors.remove(errorName);
    notifyStatusChanged();
  }

  /// Sets errors on a form control when running validations manually,
  /// rather than automatically.
  ///
  void setErrors(Map<String, dynamic> errors) {
    this._errors.clear();
    this._errors.addAll(errors);
    notifyStatusChanged();
  }

  /// This method is for internal use
  @protected
  void notifyStatusChanged() {
    this._onStatusChanged.value = this.valid;
  }
}
