// Copyright 2020 Joan Pablo Jim√©nez Milian. All rights reserved.
// Use of this source code is governed by the MIT license that can be
// found in the LICENSE file.

import 'package:flutter/foundation.dart';
import 'package:reactive_forms/reactive_forms.dart';

/// This is the base class for FormControl and FormGroup.
///
/// It provides some of the shared behavior that all controls and groups have,
/// like running validators, calculating status, and resetting state.
///
/// It also defines the properties that are shared between all sub-classes,
/// like value and valid.
///
/// It shouldn't be instantiated directly.
abstract class AbstractControl<T> {
  final _onStatusChanged = ValueNotifier<ControlStatus>(ControlStatus.valid);
  final List<ValidatorFunction> _validators;
  final List<AsyncValidatorFunction> _asyncValidators;
  final Map<String, dynamic> _errors = {};
  bool _runningAsyncValidators = false;

  /// Represents if the control is touched or not. A control is touched when
  /// the user taps on the ReactiveFormField widget and then remove focus or
  /// completes the text edition. Validation messages will begin to show up
  /// when the FormControl is touched.
  bool touched;

  AbstractControl({
    List<ValidatorFunction> validators,
    List<AsyncValidatorFunction> asyncValidators,
    this.touched = false,
  })  : _validators = validators ?? const [],
        _asyncValidators = asyncValidators ?? const [];

  /// The list of functions that determines the validity of this control.
  ///
  /// In [FormGroup] these come in handy when you want to perform validation
  /// that considers the value of more than one child control.
  List<ValidatorFunction> get validators => List.unmodifiable(_validators);

  /// The list of async functions that determines the validity of this control.
  ///
  /// In [FormGroup] these come in handy when you want to perform validation
  /// that considers the value of more than one child control.
  List<AsyncValidatorFunction> get asyncValidators =>
      List.unmodifiable(_asyncValidators);

  /// The current value of the control.
  T get value;

  /// Sets the value to the control
  set value(T newValue);

  /// An object containing any errors generated by failing validation,
  /// or empty [Map] if there are no errors.
  Map<String, dynamic> get errors => Map.unmodifiable(_errors);

  /// A [ValueListenable] that emits an event every time the validation status
  /// of the control changes.
  ValueListenable<ControlStatus> get onStatusChanged => _onStatusChanged;

  /// A [ValueListenable] that emits an event every time the value
  /// of the control changes.
  ValueListenable<T> get onValueChanged;

  /// True if the control doesn't has validations errors.
  bool get valid => this.status == ControlStatus.valid;

  /// True if the control has validations errors.
  bool get invalid => this.status == ControlStatus.invalid;

  bool get pending => this.status == ControlStatus.pending;

  bool get hasErrors => this._errors.keys.length > 0;

  ControlStatus get status => _onStatusChanged.value;

  /// Disposes the control
  @protected
  void dispose() {
    _onStatusChanged.dispose();
  }

  /// Resets the control.
  void reset();

  /// Add errors when running validations manually, rather than automatically.
  ///
  /// ### Example:
  ///
  /// ```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.addError({'mustMatch': true});
  ///```
  ///
  /// See also [AbstractControl.removeError]
  ///
  void addError(Map<String, dynamic> error) {
    this._errors.addAll(error);
    checkValidityAndUpdateStatus();
  }

  /// Remove errors by name.
  ///
  /// ### Example:
  ///
  ///```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.removeError('mustMatch');
  ///```
  ///
  /// See also [AbstractControl.addError]
  ///
  void removeError(String errorName) {
    this._errors.remove(errorName);
    checkValidityAndUpdateStatus();
  }

  /// Sets errors on a form control when running validations manually,
  /// rather than automatically.
  ///
  void setErrors(Map<String, dynamic> errors) {
    this._errors.clear();
    this._errors.addAll(errors);
    checkValidityAndUpdateStatus();
  }

  @protected
  void validate() {
    this._onStatusChanged.value = ControlStatus.pending;

    final errors = Map<String, dynamic>();
    this.validators.forEach((validator) {
      final error = validator(this);
      if (error != null) {
        errors.addAll(error);
      }
    });

    if (errors.keys.isNotEmpty) {
      setErrors(errors);
      return;
    }

    if (this.asyncValidators.isEmpty) {
      setErrors(errors);
    } else {
      validateAsync(errors);
    }
  }

  /// This method is for internal use
  @protected
  void checkValidityAndUpdateStatus() {
    this._onStatusChanged.value =
        this.hasErrors ? ControlStatus.invalid : ControlStatus.valid;
  }

  @protected
  void updateStatus() {
    this._onStatusChanged.value = this.status;
  }

  @protected
  Future<void> validateAsync(Map<String, dynamic> prevErrors) async {
    if (this._runningAsyncValidators) {
      return;
    }
    this._runningAsyncValidators = true;

    final errors = await Future.wait(
        this.asyncValidators.map((validator) => validator(this)).toList());

    if (errors == null) {
      setErrors(prevErrors);
      return;
    }

    errors.where((error) => error != null).forEach(prevErrors.addAll);

    this._runningAsyncValidators = false;
    setErrors(prevErrors);
  }
}
