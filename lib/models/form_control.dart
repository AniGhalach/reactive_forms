import 'package:flutter/foundation.dart';
import 'package:reactive_forms/models/abstract_control.dart';
import 'package:reactive_forms/validators/validators.dart';

/// Tracks the value and validation status of an individual form control.
class FormControl<T> implements AbstractControl<T> {
  final _onStatusChanged = ValueNotifier<bool>(true);
  final _onFocusChanged = ValueNotifier<bool>(false);
  final _onValueChanged = ValueNotifier<T>(null);
  T _defaultValue;

  /// The list of functions that determines the validity of this control.
  final List<ValidatorFunction> validators;

  /// An object containing any errors generated by failing validation,
  /// or empty [Map] if there are no errors.
  final Map<String, dynamic> _errors = {};

  /// Represents if the control is touched or not. A control is touched when
  /// the user taps on the ReactiveFormField widget and then remove focus or
  /// completes the text edition. Validation messages will begin to show up
  /// when the FormControl is touched.
  bool touched;

  /// Creates a new FormControl instance, optionally pass [defaultValue]
  /// and [validators]. You can set [touched] to true to force the validation
  /// messages to show up at the very first time the widget builds.
  ///
  /// You can also force the data type of this control by specifying it
  ///
  /// ### Example:
  /// ```dart
  /// final priceControl = FormControl<double>(defaultValue: 0.0);
  /// ```
  ///
  FormControl({
    T defaultValue,
    this.validators = const [],
    this.touched = false,
  }) : _defaultValue = defaultValue {
    this.value = _defaultValue;
  }

  /// Returns the current value of the control.
  @override
  T get value => _onValueChanged.value;

  /// Returns the default value of the control.
  T get defaultValue => _defaultValue;

  /// True if the control is marked as focused.
  bool get focused => _onFocusChanged.value;

  @override
  Map<String, dynamic> get errors => Map.unmodifiable(_errors);

  /// Sets the [newValue] as value for the form control.
  @override
  set value(T newValue) {
    _validate(newValue);
    _onValueChanged.value = newValue;
  }

  @override
  void dispose() {
    _onStatusChanged.dispose();
    _onFocusChanged.dispose();
    _onValueChanged.dispose();
  }

  /// A [Stream] that emits an event every time the validation status of
  /// the control changes.
  @override
  ValueListenable<bool> get onStatusChanged => _onStatusChanged;

  @override
  ValueListenable<T> get onValueChanged => _onValueChanged;

  /// A [Stream] that emits an event every time the focus status of
  /// the control changes.
  ChangeNotifier get onFocusChanged => _onFocusChanged;

  /// True if the control doesn't has validations errors.
  @override
  bool get valid => this.errors.keys.length == 0;

  /// True if the control has validations errors.
  @override
  bool get invalid => !this.valid;

  /// Sets errors on a form control when running validations manually,
  /// rather than automatically.
  ///
  /// ### Example:
  ///
  /// ```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.addError({'mustMatch': true});
  ///```
  ///
  /// See also [FormControl.errors]
  ///
  void addError(Map<String, dynamic> error) {
    final prevStatus = this.valid;
    this.errors.addAll(error);
    if (prevStatus != this.valid) {
      _onStatusChanged.value = this.valid;
    }
  }

  /// Remove errors by name.
  ///
  /// ### Example:
  ///
  ///```dart
  /// final passwordConfirmation = FormControl();
  ///
  /// passwordConfirmation.removeError('mustMatch');
  ///```
  ///
  /// See also [FormControl.errors]
  ///
  void removeError(String errorName) {
    final prevStatus = this.valid;
    this.errors.remove(errorName);
    if (prevStatus != this.valid) {
      _onStatusChanged.value = this.valid;
    }
  }

  /// Resets the form control, marking it as untouched,
  /// and setting the [value] to [defaultValue].
  @override
  void reset() {
    this.touched = false;
    this.value = this.defaultValue;
  }

  /// Remove focus on a ReactiveFormField widget without the interaction
  /// of the user.
  ///
  /// ### Example:
  ///
  /// ```dart
  /// final formControl = form.formControl('name');
  ///
  /// // UI text field lose focus
  /// formControl.unfocus();
  ///```
  ///
  void unfocus() {
    if (this.focused) {
      _onFocusChanged.value = false;
    }
  }

  /// Sets focus on a ReactiveFormField widget without the interaction
  /// of the user.
  ///
  /// ### Example:
  ///
  /// ```dart
  /// final formControl = form.formControl('name');
  ///
  /// // UI text field get focus and the device keyboard pop up
  /// formControl.focus();
  ///```
  ///
  void focus() {
    if (!this.focused) {
      _onFocusChanged.value = true;
    }
  }

  void _validate(T value) {
    this._errors.clear();
    this.validators.forEach((validator) {
      final error = validator(value);
      if (error != null) {
        this._errors.addAll(error);
      }
    });
  }
}
